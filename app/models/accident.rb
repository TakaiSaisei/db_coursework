class Accident < ApplicationRecord
  belongs_to :address
  belongs_to :officer
  has_and_belongs_to_many :citizens
  has_and_belongs_to_many :cars
  validates :date, :description, presence: true

  def self.generate
    descriptions = ['ч. 1. Управление транспортным средством, не зарегистрированным в установленном порядке',
                    'ч. 2. Управление легковым такси, автобусом или грузовым автомобилем, предназначенным и оборудованным для перевозок людей, с числом мест для сидения более чем восемь (кроме места для водителя), специализированным транспортным средством, предназначенным и оборудованным для перевозок опасных грузов, которые не прошли государственный технический осмотр или технический осмотр',
                    'ч. 1. Управление зарегистрированным транспортным средством с нечитаемыми, нестандартными или установленными с нарушением требований государственного стандарта государственными регистрационными знаками',
                    'ч. 3. Установка на транспортном средстве заведомо подложных государственных регистрационных знаков',
                    'ч. 3. Передача управления транспортным средством лицу, не имеющему при себе документов на право управления им',
                    'ч. 2. Передача управления транспортным средством лицу, находящемуся в состоянии опьянения',
                    'ч. 5. Превышение установленной скорости движения транспортного средства на величину более 80 км/ч',
                    'Движение на грузовом автомобиле с разрешенной максимальной массой более 3,5 т по автомагистрали далее второй полосы, а равно учебная езда по автомагистрали',
                    'Нарушение правил пользования внешними световыми приборами, звуковыми сигналами, аварийной сигнализацией или знаком аварийной остановки',
                    'ч. 1. Нарушение правил перевозки грузов, а равно правил буксировки',
                    'ч. 3. Нарушение требований к перевозке детей, установленных Правилами дорожного движения']
    5_000.times do
      random_description = rand(0..10)
      accident = Accident.create(address_id: rand(11..20),
                                 officer_id: rand(1..10),
                                 date: Faker::Date.backward(days: 500),
                                 description: descriptions[random_description])
      car = Car.find(rand(1..10))
      citizen = car.citizen
      accident.citizens << citizen
      accident.cars << car
      Penalty.create(accident_id: accident.id,
                     citizen_id: citizen.id,
                     description: descriptions[random_description],
                     amount: rand(500..10_000),
                     payed: [true, false].sample)
    end
  end
end
